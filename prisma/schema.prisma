generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EXPERT
  VIEWER
}

enum AssessmentStatus {
  DRAFT
  SUBMITTED
  REVIEWED
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  name             String?
  password         String
  role             Role
  companyId        String?
  company          Company?     @relation(fields: [companyId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?    // Soft delete
  uploadedEvidence Evidence[]   @relation("UserEvidence")
  assessments      Assessment[] @relation("ExpertAssessment")
}

model Company {
  id              String           @id @default(uuid())
  name            String
  sectorId        String
  sector          Sector           @relation(fields: [sectorId], references: [id])
  departments     Department[]
  users           User[]
  assessments     Assessment[]
  templateConfigs TemplateConfig[]
  deletedAt       DateTime?        // Soft delete
}

model Department {
  id          String       @id @default(uuid())
  name        String
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id])
  assessments Assessment[]
  deletedAt   DateTime?    // Soft delete

  @@unique([companyId, name])
}

model Sector {
  id                             String                        @id @default(uuid())
  name                           String                        @unique
  description                    String?
  companies                      Company[]
  descriptors                    MaturityDescriptor[]
  deletedDescriptors             DeletedMaturityDescriptor[]
  deletedAt                      DateTime?                     // Soft delete
}

model Assessment {
  id                String           @id @default(uuid())
  companyId         String
  departmentId      String?
  expertId          String
  status            AssessmentStatus
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?        // Soft delete
  scores            Score[]
  evidence          Evidence[]
  company           Company          @relation(fields: [companyId], references: [id])
  department        Department?      @relation(fields: [departmentId], references: [id])
  expert            User             @relation("ExpertAssessment", fields: [expertId], references: [id])
  weightingSchemeId String?
  weightingScheme   WeightingScheme? @relation(fields: [weightingSchemeId], references: [id])
}

model Category {
  id                 String           @id @default(uuid())
  name               String           @unique
  description        String?
  dimensions         Dimension[]      // Relation to Dimensions
  categoryWeightings CategoryWeight[]
  deletedAt          DateTime?        // Soft delete
}

model Dimension {
  id                             String                        @id @default(uuid())
  name                           String                        @unique // Name is unique
  description                    String?                       // Description is optional
  categoryId                     String?                       // categoryId is optional
  category                       Category?                     @relation(fields: [categoryId], references: [id]) // Relation is optional
  descriptors                    MaturityDescriptor[]
  deletedDescriptors             DeletedMaturityDescriptor[]
  scores                         Score[]
  evidence                       Evidence[]
  templateConfigs                TemplateConfig[]
  dimensionWeights               DimensionWeight[]             // Added missing back-relation
  deletedAt                      DateTime?                     // Soft delete
}

model MaturityDescriptor {
  id          String    @id @default(uuid())
  dimensionId String
  sectorId    String
  level       Int // 1-5
  description String
  dimension   Dimension @relation(fields: [dimensionId], references: [id])
  sector      Sector    @relation(fields: [sectorId], references: [id])
  deletedAt   DateTime? // Soft delete

  @@index([deletedAt])
  @@unique([dimensionId, sectorId, level]) // Added unique constraint for data integrity
}

model DeletedMaturityDescriptor {
  id          String    @id @default(uuid())
  originalId  String    @unique // Reference to the original descriptor
  dimensionId String
  sectorId    String
  level       Int // 1-5
  description String
  deletedAt   DateTime  @default(now())
  dimension   Dimension @relation(fields: [dimensionId], references: [id])
  sector      Sector    @relation(fields: [sectorId], references: [id])

  @@index([deletedAt])
  @@index([originalId])
}

model Score {
  id           String     @id @default(uuid())
  assessmentId String
  dimensionId  String
  level        Int // 1-5
  quantitative Float?
  notes        String?
  perception   Boolean // true: perception-based, false: evidence-backed
  auditTrail   String?
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  dimension    Dimension  @relation(fields: [dimensionId], references: [id])
  deletedAt    DateTime?  // Soft delete
}

model Evidence {
  id           String     @id @default(uuid())
  assessmentId String
  dimensionId  String
  fileUrl      String?    // Ensuring this is optional as per user requirement
  fileType     String?    // Ensuring this is optional as per user requirement
  uploadedById String
  notes        String?
  uploadedAt   DateTime   @default(now())
  deletedAt    DateTime?  // Soft delete field
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  dimension    Dimension  @relation(fields: [dimensionId], references: [id])
  uploadedBy   User       @relation("UserEvidence", fields: [uploadedById], references: [id])
}

model TemplateConfig {
  id          String    @id @default(uuid())
  companyId   String
  dimensionId String
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete

  company   Company   @relation(fields: [companyId], references: [id])
  dimension Dimension @relation(fields: [dimensionId], references: [id])

  @@unique([companyId, dimensionId])
}

model WeightingScheme {
  id                String           @id @default(uuid())
  name              String           @unique
  description       String?
  isDefault         Boolean          @default(false)
  deletedAt         DateTime?        // Soft delete
  categoryWeights   CategoryWeight[]
  assessments       Assessment[]     // Assessments using this scheme
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model CategoryWeight {
  id                String            @id @default(uuid())
  weight            Float             // Weight for this category within the overall scheme
  categoryId        String
  category          Category          @relation(fields: [categoryId], references: [id])
  weightingSchemeId String
  weightingScheme   WeightingScheme   @relation(fields: [weightingSchemeId], references: [id])
  dimensionWeights  DimensionWeight[] // Specific weights for dimensions within this category
  deletedAt         DateTime?         // Soft delete

  @@unique([categoryId, weightingSchemeId])
}

model DimensionWeight {
  id               String         @id @default(uuid())
  weight           Float          // Weight for this dimension relative to others in the same category (sums to 1.0 within category)
  dimensionId      String
  dimension        Dimension      @relation(fields: [dimensionId], references: [id])
  categoryWeightId String         // Links to the parent CategoryWeight
  categoryWeight   CategoryWeight @relation(fields: [categoryWeightId], references: [id])
  deletedAt        DateTime?      // Soft delete

  @@unique([dimensionId, categoryWeightId])
}

// NEW MODEL for sector-specific dimension weights
// model DimensionWeightInSector {
//   id          String    @id @default(cuid())
//   weight      Float     // e.g., 0.2 for 20%
//   dimension   Dimension @relation(fields: [dimensionId], references: [id])
//   dimensionId String
//   sector      Sector    @relation(fields: [sectorId], references: [id])
//   sectorId    String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   deletedAt   DateTime? // Soft delete
// 
//   @@unique([dimensionId, sectorId])
// }
